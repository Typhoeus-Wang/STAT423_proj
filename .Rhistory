# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=datac, family=binomial)
summary(model_best_forward_CP)
conf_intervals = confint(model_best_forward_CP)
print(conf_intervals)
predictions = predict(model_best_forward_CP, newdata = test.data, type = "response")
binary_predictions = ifelse(predictions >= 0.5, 1, 0)
accuracy <- sum(binary_predictions == test.data$status) / nrow(test.data)
accuracy
# binary_predictions
sum(binary_predictions == test.data$status)
# length(test.data)
conf_matrix = table(test.data$status, binary_predictions)
print("this is the confusion ")
conf_matrix
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
summary(model_best_forward_CP)
predictions = predict(model_best_forward_CP, newdata = test.data, type = "response")
binary_predictions = ifelse(predictions >= 0.5, 1, 0)
accuracy <- sum(binary_predictions == test.data$status) / nrow(test.data)
accuracy
# binary_predictions
sum(binary_predictions == test.data$status)
# length(test.data)
conf_matrix = table(test.data$status, binary_predictions)
print("this is the confusion ")
conf_matrix
# Fit the Box-Cox transformation
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data)
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
# Fit the Box-Cox transformation
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data)
# Fit the Box-Cox transformation
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data, family=binomial)
# Fit the Box-Cox transformation
train.data$status <- factor(train.data$status)
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data, family=binomial)
# Fit the Box-Cox transformation
train.data$status <- factor(train.data$status)
train.data <- train.data[complete.cases(train.data$status), ]
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data, family=binomial)
# Fit the Box-Cox transformation
bc_results <- boxcox(status ~ domain_registration_length + web_traffic, data = train.data, family=binomial)
train.data$domain_registration_length = log(train.data$domain_registration_length + 1)
test.data$domain_registration_length = log(test.data$domain_registration_length + 1)
train.data$web_traffic = log(train.data$web_traffic + 1)
test.data$web_traffic = log(test.data$web_traffic + 1)
# full model
fit_full = glm(status~., data=train.data, family=binomial)
# empty model
fit_empty = glm(status~1, data=train.data, family=binomial)
step(fit_full, dir="backward")
step(fit_empty, dir="forward", scope=list(upper=fit_full,lowwer=fit_empty))
model_best_backward_AIC = glm(formula = status ~ length_hostname + ip + special_char +
nb_www + nb_com + nb_dslash + http_in_path + https_token +
ratio_digits_url + ratio_digits_host + nb_subdomains + nb_redirection +
char_repeat + phish_hints + domain_registration_length +
domain_age + web_traffic + google_index + page_rank, family = binomial,
data = datac)
summary(model_best_backward_AIC)
model_best_forward_AIC = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
nb_subdomains + ratio_digits_url + nb_com + char_repeat +
web_traffic, family = binomial, data = datac)
summary(model_best_forward_AIC)
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
summary(model_best_forward_CP)
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
summary(model_best_forward_CP)
conf_intervals = confint(model_best_forward_CP)
print(conf_intervals)
conf_intervals = confint(model_best_forward_CP)
print(conf_intervals)
predictions = predict(model_best_forward_CP, newdata = test.data, type = "response")
binary_predictions = ifelse(predictions >= 0.5, 1, 0)
accuracy <- sum(binary_predictions == test.data$status) / nrow(test.data)
accuracy
# binary_predictions
sum(binary_predictions == test.data$status)
# length(test.data)
conf_matrix = table(test.data$status, binary_predictions)
print("this is the confusion ")
conf_matrix
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+phish_hints+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
predictions = predict(model_best_forward_CP, newdata = test.data, type = "response")
binary_predictions = ifelse(predictions >= 0.5, 1, 0)
accuracy <- sum(binary_predictions == test.data$status) / nrow(test.data)
accuracy
# binary_predictions
sum(binary_predictions == test.data$status)
# length(test.data)
conf_matrix = table(test.data$status, binary_predictions)
print("this is the confusion ")
conf_matrix
pchisq(3513.5, df=8661, lower.tail=F)
pchisq(3513.5, df=8661)
pchisq(3513.5, df=8661)
residuals(model_best_forward_CP)
pchisq(3513.5, df=8661)
residuals(model_best_forward_CP, type="response")
pchisq(3513.5, df=8661, lower.tail=F)
residuals(model_best_forward_CP, type="response")
pchisq(3513.5, df=8661, lower.tail=F)
# residuals(model_best_forward_CP, type="response")
plot(model_best_forward_CP)
# full model
fit_full = glm(status~., data=train.data, family=binomial)
# empty model
fit_empty = glm(status~1, data=train.data, family=binomial)
step(fit_full, dir="backward")
step(fit_empty, dir="forward", scope=list(upper=fit_full,lowwer=fit_empty))
model_best_backward_AIC = glm(formula = status ~ length_hostname + ip + special_char +
nb_www + nb_com + nb_dslash + http_in_path + https_token +
ratio_digits_url + ratio_digits_host + nb_subdomains + nb_redirection +
char_repeat + phish_hints + domain_registration_length +
domain_age + web_traffic + google_index + page_rank, family = binomial,
data = datac)
summary(model_best_backward_AIC)
model_best_forward_AIC = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
nb_subdomains + ratio_digits_url + nb_com + char_repeat +
web_traffic, family = binomial, data = datac)
summary(model_best_forward_AIC)
step(fit_full, dir="backward")
# step(fit_empty, dir="forward", scope=list(upper=fit_full,lowwer=fit_empty))
# model_best_backward_AIC = glm(formula = status ~ length_hostname + ip + special_char +
#    nb_www + nb_com + nb_dslash + http_in_path + https_token +
#    ratio_digits_url + ratio_digits_host + nb_subdomains + nb_redirection +
#    char_repeat + phish_hints + domain_registration_length +
#    domain_age + web_traffic + google_index + page_rank, family = binomial,
#    data = datac)
# summary(model_best_backward_AIC)
# model_best_forward_AIC = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
#    ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
#    nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
#    nb_subdomains + ratio_digits_url + nb_com + char_repeat +
#    web_traffic, family = binomial, data = datac)
# summary(model_best_forward_AIC)
# step(fit_full, dir="backward")
step(fit_empty, dir="forward", scope=list(upper=fit_full,lowwer=fit_empty))
# model_best_backward_AIC = glm(formula = status ~ length_hostname + ip + special_char +
#    nb_www + nb_com + nb_dslash + http_in_path + https_token +
#    ratio_digits_url + ratio_digits_host + nb_subdomains + nb_redirection +
#    char_repeat + phish_hints + domain_registration_length +
#    domain_age + web_traffic + google_index + page_rank, family = binomial,
#    data = datac)
# summary(model_best_backward_AIC)
# model_best_forward_AIC = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
#    ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
#    nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
#    nb_subdomains + ratio_digits_url + nb_com + char_repeat +
#    web_traffic, family = binomial, data = datac)
# summary(model_best_forward_AIC)
# step(fit_full, dir="backward")
step(fit_empty, dir="forward", scope=list(upper=fit_full,lowwer=fit_empty))
model_best_backward_AIC = glm(formula = status ~ length_hostname + ip + special_char +
nb_www + nb_com + nb_dslash + http_in_path + https_token +
ratio_digits_url + ratio_digits_host + nb_subdomains + nb_redirection +
char_repeat + phish_hints + domain_registration_length +
domain_age + web_traffic + google_index + page_rank, family = binomial,
data = datac)
summary(model_best_backward_AIC)
model_best_forward_AIC = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
nb_subdomains + ratio_digits_url + nb_com + char_repeat +
web_traffic, family = binomial, data = datac)
summary(model_best_forward_AIC)
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
summary(model_best_forward_CP)
pchisq(3513.5, df=8661, lower.tail=F) # 1
# residuals(model_best_forward_CP, type="response")
plot(model_best_forward_CP)
pchisq(3513.5, df=8661, lower.tail=F) # 1
# residuals(model_best_forward_CP, type="response")
plot(model_best_forward_CP)
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
best_model = glm(formula = status ~ google_index + page_rank + nb_www + phish_hints +
ratio_digits_host + ip + nb_redirection + domain_age + length_hostname +
nb_dslash + https_token + special_char + http_in_path + domain_registration_length +
nb_subdomains + ratio_digits_url + nb_com + char_repeat +
web_traffic, family = binomial, data = datac)
summary(best_model)
p = ncol(train.data) - 1
# cat("The leave-one out cross validation for best model selected by AIC is: ", loocv.lm(model_best_backward))
bc_fit_bwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "backward")
bc_fit_fwd <- regsubsets(status ~ ., data = train.data, nvmax = p, method = "forward")
cat("model selected by Mallows’s CP farward has cp: ", min(summary(bc_fit_bwd)$cp), "\n")
cat("model selected by Mallows’s CP backward has cp: ", min(summary(bc_fit_fwd)$cp), "\n")
model_best_forward_CP <- which.min(summary(bc_fit_bwd)$cp)
cp_predictors_forward <- names(which(summary(bc_fit_bwd)$which[model_best_forward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP forward:", paste(cp_predictors_forward, collapse = ", "), "\n")
# Find the predictors selected by BIC
model_best_backward_CP <- which.min(summary(bc_fit_fwd)$cp)
cp_predictors_backward <- names(which(summary(bc_fit_fwd)$which[model_best_backward_CP, ] == TRUE))
cat("Predictors selected by Mallows’s CP backward:", paste(cp_predictors_backward, collapse = ", "), "\n")
model_best_forward_CP = glm(status~length_hostname+ip+special_char+nb_www+nb_com+nb_dslash+http_in_path+https_token+ratio_digits_url+ratio_digits_host+nb_subdomains+nb_redirection+char_repeat+phish_hints+domain_registration_length+domain_age+web_traffic+google_index+page_rank, data=train.data, family=binomial)
summary(model_best_forward_CP)
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
library(tidyverse)
install.packages("tidyverse")
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
library(tidyverse)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
library(tidyverse)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
library(tidyverse)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
library(MASS)
library(tidyverse)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
# setwd("/Users/typhoeus/Documents/Courses/STAT 423/Project/")
library(corrplot)
library(car)
library(ggplot2)
library(vcd)
library(gridExtra)
library(dplyr)
# library(MASS)
# library(tidyverse)
data <- read.csv("dataset_phishing.csv")
data <- data[, -1]
data <- data[, c(1:56, 81:ncol(data))] # remove content based features
data$status <- as.numeric(data$status == "phishing") #phishing -> 1, legitimate -> 0
data$status <- as.factor(data$status)
which(is.na(data)) # check missing value
# let categorical date become factor
columns_to_factor <- c("ip", "https_token", "punycode", "port", "tld_in_path", "tld_in_subdomain", "abnormal_subdomain", "prefix_suffix", "random_domain", "shortening_service", "path_extension", "domain_in_brand", "brand_in_subdomain", "brand_in_path", "suspecious_tld", "statistical_report", "whois_registered_domain", "dns_record", "google_index")
data[, columns_to_factor] <- lapply(data[, columns_to_factor], factor)
# seperate continuous predictors and categorical predictors
con_data <- data[, !sapply(data, is.factor)]
factor_data <- data[, sapply(data, is.factor)]
# get the index of the observation that have negative value in any column, and remove the observation
negative_index <- which(apply(con_data, 1, function(row) any(row < 0)))
data <- data[-negative_index, ]
# count categorical predictors
factor_data <- data[, sapply(data, is.factor)]
lapply(factor_data, table)
good_factor <- c("ip", "https_token", "prefix_suffix", "google_index", "status")
bad_factor <- setdiff(names(factor_data), good_factor)
# select evenly distributed categorical predictors
data <- select(data, -all_of(bad_factor))
